<style lang="less">
.userinfo {
  display: flex;
  flex-direction: column;
  align-items: left;
}

.userinfo-avatar {
  width: 80rpx;
  height: 80rpx;
  border-radius: 50%;
}

.userinfo-nickname {
  color: #aaa;
}
.echarts {
  width: 750rpx;
  height: 900rpx;
}
.weui-flex__item button {
  margin: 5rpx 10rpx;
}
</style>
<template>
  <view class="page">
    <view class="userinfo">
      <view> Day {{dayCount}} 
        <!-- 总资产: {{myWealth}}  -->
        收益率: {{getProfitStat}} %
        价格: {{fixedPrice}}</view>
    </view>

    <toast />
    <view class="echarts">
      <candlestick 
      :chartData.sync="renderChartData" 
      :volumes.sync="renderVolumesData"
      :category.sync="renderCategory"/>
    </view>

    <view class="weui-flex">
      <view class="weui-flex__item">
        <button class="weui-btn" 
        type="primary" wx:if="{{!haveStock}}" @tap="buy"> 买入 </button>
        <button class="weui-btn" 
        type="danger" wx:if="{{haveStock}}" @tap="sell"> 卖出 </button>
        </view>
      <view class="weui-flex__item">
      <button class="weui-btn" type="primary" @tap="nextDay"> 观望 </button>
      </view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import Panel from '@/components/panel' // alias example
import Candlestick from '@/components/candlestick' // alias example
import Toast from 'wepy-com-toast'
import testMixin from '../mixins/test'
import MarketDataHandler from './dataHandler'
export default class Game extends wepy.page {
  config = {
    navigationBarTitleText: '币圈梭哈王'
  };
  components = {
    panel: Panel,
    toast: Toast,
    candlestick: Candlestick
  };

  mixins = [testMixin];

  data = {
    userInfo: {},
    dayCount: 0,
    fund: 10000,
    qty: 0,
    currentPrice: 0,
    renderChartData: [],
    volumes: [],
    renderVolumesData: [],
    chartsData: [
      [100, 200, 40, 250],
      [80, 90, 66, 100],
      [90, 40, 33, 110],
      [50, 60, 40, 80],
      [200, 180, 160, 200],
      [100, 200, 40, 250],
      [80, 90, 66, 100]
    ],
    renderCategory: []
  };

  computed = {
    marketCap() {
      const { qty, currentPrice } = this
      return qty * currentPrice
    },
    haveStock() {
      const { qty } = this
      return qty !== 0
    },
    myWealth() {
      const {fund, marketCap} = this
      return (fund + marketCap).toFixed(2)
    },
    fixedPrice() {
      return this.currentPrice.toFixed(2)
    },
    getProfitStat() {
      const {myWealth} = this
      const diff = myWealth - 10000
      return (diff / 10000 * 100).toFixed(2)
    }
  };

  methods = {
    buy() {
      const { fund, currentPrice } = this
      this.qty = fund / currentPrice
      this.fund = 0
      this.nextDay()
    },
    sell() {
      this.fund = this.marketCap
      this.qty = 0
      this.nextDay()
    }
  };

  events = {
    'index-emit': (...args) => {
      let $event = args[args.length - 1]
      console.log(
        `${this.$name} receive ${$event.name} from ${$event.source.$name}`
      )
    }
  };

  async onLoad() {
    const { data, errMsg } = await wepy.request(
      'https://api.xueqiu.com/ksoul/candidate/random'
    )
    console.log('We got response')
    const sliceBefore = (array) => array.slice(0, array.length - 15)
    const sliceNow = (array) => array.slice(-15)

    if (errMsg === 'request:ok') {
      console.log('Data loaded')
      // const { name} = data
      const dataHandler = new MarketDataHandler(data)
      const { chartsData, volumes, categoryData } = dataHandler
      // Candlestick Chart
      this.renderChartData = sliceBefore(chartsData)
      this.chartsData = sliceNow(chartsData)

      // Volume Chart
      this.renderVolumesData = sliceBefore(volumes)
      this.volumes = sliceNow(volumes)

      // Cat
      this.renderCategory = categoryData
    }
    this.$parent.getUserInfo(userInfo => {
      if (userInfo) {
        this.userInfo = userInfo
      }
    })
    this.nextDay()
    this.$apply()
  }
  getAvg(element) {
    const sum = element[0] + element[1] + element[2] + element[3]
    return sum / 4
  }
  shiftElementToRender() {
    const { renderChartData, chartsData, volumes, renderVolumesData } = this
    let element = chartsData.shift()
    let vol = volumes.shift()
    if (element !== undefined) {
      renderChartData.push(element)
      renderVolumesData.push(vol)
    }
    console.log('shifted')
    return element
  }
  nextDay() {
    console.log('start to shift')
    const element = this.shiftElementToRender()
    console.log('shifted in nextDay fns')
    if (element !== undefined) {
      console.log(this.currentPrice)
      this.currentPrice = this.getAvg(element)
      this.dayCount += 1
    } else {
      const {getProfitStat} = this
      wx.redirectTo({ url: `/pages/result?score=${getProfitStat}` })
    }
  }
}
</script>
